// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Builder = require("../modules/Builder.bs.js");
var Generator = require("../modules/Generator.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ScriptRunner = require("../modules/ScriptRunner.bs.js");
var GeneratorPages = require("./GeneratorPages.bs.js");
var ResourceLoader = require("../modules/ResourceLoader.bs.js");
var GeneratorInputs = require("./GeneratorInputs.bs.js");

function GeneratorView$Thumbnail(Props) {
  var thumbnail = Props.thumbnail;
  return React.createElement("div", {
              className: "mb-8 border bg-gray-100 p-4 w-72 h-72"
            }, React.createElement("img", {
                  height: "256",
                  src: thumbnail.url,
                  width: "256"
                }));
}

var Thumbnail = {
  make: GeneratorView$Thumbnail
};

function GeneratorView$Video(Props) {
  var video = Props.video;
  return React.createElement("div", {
              className: "mb-8",
              style: {
                maxWidth: "640px"
              }
            }, React.createElement("div", {
                  style: {
                    maxWidth: "640px",
                    paddingTop: "56.25%",
                    position: "relative",
                    width: "100%"
                  }
                }, React.createElement("iframe", {
                      style: {
                        height: "100%",
                        position: "absolute",
                        top: "0",
                        width: "100%"
                      },
                      allowFullScreen: true,
                      src: video.url
                    })));
}

var Video = {
  make: GeneratorView$Video
};

function GeneratorView$Instructions(Props) {
  var instructions = Props.instructions;
  return React.createElement("div", {
              className: "mb-8"
            }, instructions);
}

var Instructions = {
  make: GeneratorView$Instructions
};

function GeneratorView$GeneratorInfo(Props) {
  var generatorDef = Props.generatorDef;
  var video = generatorDef.video;
  var tmp;
  if (video !== undefined) {
    tmp = React.createElement(GeneratorView$Video, {
          video: video
        });
  } else {
    var thumbnail = generatorDef.thumbnail;
    tmp = thumbnail !== undefined ? React.createElement(GeneratorView$Thumbnail, {
            thumbnail: thumbnail
          }) : null;
  }
  var instructions = generatorDef.instructions;
  return React.createElement("div", undefined, tmp, instructions !== undefined ? React.createElement(GeneratorView$Instructions, {
                    instructions: Caml_option.valFromOption(instructions)
                  }) : null);
}

var GeneratorInfo = {
  make: GeneratorView$GeneratorInfo
};

function GeneratorView(Props) {
  var generatorDef = Props.generatorDef;
  var match = React.useState(function () {
        
      });
  var setModel = match[1];
  var model = match[0];
  React.useEffect((function () {
          ResourceLoader.loadResources(generatorDef).then(function (results) {
                if (results.TAG === /* Ok */0) {
                  var match = results._0;
                  var model = Builder.Model.make(undefined);
                  var model$1 = match[0].reduce((function (acc, param) {
                          return Builder.addImage(acc, param[0], param[1]);
                        }), model);
                  var model$2 = match[1].reduce((function (acc, param) {
                          return Builder.addTexture(acc, param[0], param[1]);
                        }), model$1);
                  ScriptRunner.run(generatorDef, model$2).then(function (model) {
                        return Curry._1(setModel, (function (param) {
                                      return model;
                                    }));
                      });
                  return ;
                }
                console.log(results._0);
                
              });
          
        }), [generatorDef]);
  var runScript = function (model) {
    ScriptRunner.run(generatorDef, model).then(function (model) {
          return Curry._1(setModel, (function (param) {
                        return model;
                      }));
        });
    
  };
  var onInputsChange = runScript;
  var onPagesInputsChange = function (param) {
    return runScript(Generator.getModel(undefined));
  };
  return React.createElement("div", undefined, model !== undefined ? React.createElement("div", undefined, React.createElement(GeneratorView$GeneratorInfo, {
                        generatorDef: generatorDef
                      }), React.createElement(GeneratorInputs.make, {
                        model: model,
                        onChange: onInputsChange
                      }), React.createElement(GeneratorPages.make, {
                        generatorDef: generatorDef,
                        model: model,
                        onChange: onPagesInputsChange
                      })) : null);
}

var make = GeneratorView;

var $$default = GeneratorView;

exports.Thumbnail = Thumbnail;
exports.Video = Video;
exports.Instructions = Instructions;
exports.GeneratorInfo = GeneratorInfo;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* react Not a pure module */
