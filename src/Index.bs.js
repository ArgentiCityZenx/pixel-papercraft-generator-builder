// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var FormInput = require("./builder/views/FormInput.bs.js");
var ReactDom = require("react-dom");
var Generators = require("./generators/Generators.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var GeneratorView = require("./builder/views/GeneratorView.bs.js");
var RescriptReactRouter = require("@rescript/react/src/RescriptReactRouter.bs.js");

require('tailwindcss/tailwind.css');
;

function Index$GeneratorOptGroup(Props) {
  var label = Props.label;
  var generators = Props.generators;
  return React.createElement(FormInput.OptGroup.make, {
              label: label,
              children: generators.map(function (generator) {
                    return React.createElement(FormInput.$$Option.make, {
                                value: generator.id,
                                children: generator.name,
                                key: generator.id
                              });
                  })
            });
}

var GeneratorOptGroup = {
  make: Index$GeneratorOptGroup
};

function Index$GeneratorSelect(Props) {
  var onChange = Props.onChange;
  var value = Props.value;
  var onSelectChange = function (e) {
    var target = e.target;
    var id = target.value;
    return Curry._1(onChange, id !== undefined && id !== "" ? id : undefined);
  };
  return React.createElement(FormInput.Select.make, {
              onChange: onSelectChange,
              value: value,
              size: "Large",
              children: null
            }, React.createElement(FormInput.$$Option.make, {
                  value: "",
                  children: "Select generator",
                  key: ""
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "Characters",
                  generators: Generators.character
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "Mob Characters",
                  generators: Generators.mobCharacter
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "Mob",
                  generators: Generators.mob
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "Blocks, Items and Accessories",
                  generators: Generators.utility
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "Mod",
                  generators: Generators.mod
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "Other",
                  generators: Generators.other
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "In Development",
                  generators: Generators.dev
                }), React.createElement(Index$GeneratorOptGroup, {
                  label: "Testing",
                  generators: Generators.test
                }));
}

var GeneratorSelect = {
  make: Index$GeneratorSelect
};

function Index$App(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
        
      });
  var setGeneratorDef = match[1];
  var generatorDef = match[0];
  React.useEffect((function () {
          var generatorDef = Generators.all.find(function (generator) {
                return generator.id === url.hash;
              });
          var generatorDef$1 = generatorDef === undefined ? undefined : Caml_option.some(generatorDef);
          Curry._1(setGeneratorDef, (function (param) {
                  return generatorDef$1;
                }));
          
        }), [url.hash]);
  var onGeneratorChange = function (generatorId) {
    if (generatorId !== undefined) {
      return RescriptReactRouter.push("/#" + generatorId);
    } else {
      return RescriptReactRouter.push("/");
    }
  };
  return React.createElement("div", {
              className: "p-8 pb-64"
            }, React.createElement("div", {
                  className: "pb-8"
                }, React.createElement(Index$GeneratorSelect, {
                      onChange: onGeneratorChange,
                      value: url.hash
                    })), generatorDef !== undefined ? React.createElement(GeneratorView.make, {
                    generatorDef: generatorDef
                  }) : null);
}

var App = {
  make: Index$App,
  $$default: Index$App
};

var root = document.getElementById("root");

ReactDom.render(React.createElement(Index$App, {}), root);

exports.GeneratorOptGroup = GeneratorOptGroup;
exports.GeneratorSelect = GeneratorSelect;
exports.App = App;
exports.root = root;
/*  Not a pure module */
