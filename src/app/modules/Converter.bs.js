// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Dom2 = require("./Dom2.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");

function hasValidSourceDimensions(width, height) {
  if (width % 64 === 0) {
    return width === (height << 1);
  } else {
    return false;
  }
}

function makeImage(param) {
  return new Image();
}

function makeCanvas(width, height) {
  var canvas = Dom2.$$Document.createCanvasElement(document);
  canvas.width = width;
  canvas.height = height;
  return canvas;
}

function copy(sourceCanvas, destCanvas, sx, sy, sw, sh, dx, dy, dw, dh, scale) {
  var destContext = Dom2.Canvas.getContext2d(destCanvas);
  destContext.drawImage(sourceCanvas, sx * scale | 0, sy * scale | 0, sw * scale | 0, sh * scale | 0, dx * scale | 0, dy * scale | 0, dw * scale | 0, dh * scale | 0);
  
}

function convertCallback(source, onSuccess, onError) {
  var sw = source.width;
  var sh = source.height;
  if (!hasValidSourceDimensions(sw, sh)) {
    Js_exn.raiseError("Source image dimensions are not valid");
  }
  var sCanvas = makeCanvas(sw, sh);
  var sContext = Dom2.Canvas.getContext2dWithAlpha(sCanvas);
  var dCanvas = makeCanvas(sw, sw);
  var dContext = Dom2.Canvas.getContext2dWithAlpha(dCanvas);
  sContext.drawImage(source, 0, 0);
  dContext.drawImage(source, 0, 0);
  var scale = sw / 64.0;
  dContext.save();
  dContext.translate(sw, 0);
  dContext.scale(-1, 1);
  copy(sCanvas, dCanvas, 0, 20, 4, 12, 36, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 4, 20, 4, 12, 40, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 8, 20, 4, 12, 44, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 12, 20, 4, 12, 32, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 4, 16, 4, 4, 40, 48, 4, 4, scale);
  copy(sCanvas, dCanvas, 8, 16, 4, 4, 36, 48, 4, 4, scale);
  copy(sCanvas, dCanvas, 40, 20, 4, 12, 20, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 44, 20, 4, 12, 24, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 48, 20, 4, 12, 28, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 52, 20, 4, 12, 16, 52, 4, 12, scale);
  copy(sCanvas, dCanvas, 44, 16, 4, 4, 24, 48, 4, 4, scale);
  copy(sCanvas, dCanvas, 48, 16, 4, 4, 20, 48, 4, 4, scale);
  dContext.restore();
  var dataUrl = Dom2.Canvas.toDataUrlAsPng(dCanvas);
  var image = new Image();
  var onLoad = function (param) {
    return Curry._1(onSuccess, image);
  };
  image.onload = onLoad;
  image.onerror = onError;
  image.src = dataUrl;
  
}

function convert(source) {
  return new Promise((function (resolve, reject) {
                var onSuccess = function (image) {
                  return resolve(image);
                };
                var onError = function (exn) {
                  return reject(exn);
                };
                return convertCallback(source, onSuccess, onError);
              }));
}

exports.hasValidSourceDimensions = hasValidSourceDimensions;
exports.makeImage = makeImage;
exports.makeCanvas = makeCanvas;
exports.copy = copy;
exports.convertCallback = convertCallback;
exports.convert = convert;
/* No side effect */
